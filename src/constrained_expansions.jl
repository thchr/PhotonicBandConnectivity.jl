"""
    find_symmetry_constrained_bases(sb::SymBasis, ms::AbstractVector{<:Integer},
                                    Œìidxs::AbstractVector{<:Integer})

Return a vector of indices `idxs` into a Hilbert basis or BandRepSet `sb` (a basis whose
elements are non-negative symmetry vectors), such that `sb[idx]` for each `idx ‚àà idxs` has
at least one positive element in overlap with a set of irrep multiplicities `ms`.

The correspondence between irrep labels in `ms` and theose in the vectors of `sb`, is
specified by `Œìidxs`, such that the labels of `ms` equal the labels of `sb[i][Œìidxs]` for
each `i`.
"""
function find_symmetry_constrained_bases(
        sb::Union{SymBasis, BandRepSet},
        ms::AbstractVector{<:Integer},
        Œìidxs::AbstractVector{<:Integer}
    )
    ntidxs·¥¥ = Int[]
    for (idx, n·¥¥) in enumerate(sb)
        if has_mutual_positive_elements((@view n·¥¥[Œìidxs]), ms)
            push!(ntidxs·¥¥, idx)
        end
    end
    return ntidxs·¥¥
end

# ‚â° any(x>0 & y>0) w/o allocations
has_mutual_positive_elements(x, y) = any(xy -> (xy[1] > 0) & (xy[2] > 0), zip(x,y))

function add_solution!(c‚Å±s::Vector{Vector{Int}}, ijks::NTuple{N, Int}) where N
    # push `ijks` to solution storage `c‚Å±s` as a vector of indices
    push!(c‚Å±s, [idx for idx in ijks])
end

"""
    filling_symmetry_constrained_expansions(
        ŒΩ·µó::Integer,
        ms::AbstractVector{<:Integer},
        ŒΩs·¥¥,
        sb::Union{SymBasis, BandRepSet},
        Œìidxs;
        ntidxs = eachindex(sb),
        maxdepth = div(ŒΩ·µó, minimum(ŒΩs·¥¥), RoundDown)
        )

Given a compatibility basis `sb` with Hilbert bases ``[ùêß‚ÇÅ·¥¥, ùêß‚ÇÇ·¥¥, ...]`` with associated
fillings `vs·¥¥` ``= [ŒΩ‚ÇÅ·¥¥, ŒΩ‚ÇÇ·¥¥, ...]``, find all expansions `c‚Å±s` that (a) satisfy the filling
constraint (a linear Diophantine equation)

``c‚ÇÅŒΩ‚ÇÅ·¥¥ + c‚ÇÇv‚ÇÇ·¥¥ + ... =`` `ŒΩ·µó`

with non-negative, integer coefficients {c·µ¢‚àà‚Ñï} and (b) satisfy the symmetry constraint

``(ùêß = c‚ÇÅùêß‚ÇÅ·¥¥ + c‚ÇÇùêß‚ÇÇ·¥¥ + ...)(Œì) ‚â•`` `ms`

evaluated only at the Œì-point, whose indices into the ``ùêß·µ¢·¥¥`` vector are specified by
`Œìidxs`.

# Keyword arguments
- `ntidxs`: Optionally, if the caller wants to restrict the expansion to a subset of the
  bases in `sb`, the argument `ntidxs` can provide an indexing into allowable bases of `sb`.
- `maxdepth`: include at most `maxdepth` distinct Hilbert basis vectors (see Implementation
  notes below).

# Implementation
Recursion is used to build a nested set of for loops, of depth `maxdepth`, corresponding 
to the inclusion of at most `maxdepth` Hilbert bases (this limits the maximum meaningful 
value of `maxdepth` to `div(ŒΩ·µó, minimum(ŒΩs·¥¥), RoundDown)`; its default value). 

# Note
See also the `*_loop` and `*_normaliz` methods in src/legacy_constrained_expansions.jl
that achieve the same goal by different means. They are retained, unloaded, in the codebase,
despite being less capable or much slower, respectively, in the belief that they might more
provide a simpler illustration of the conceptual approach.
"""
function filling_symmetry_constrained_expansions(
        ŒΩ·µó::Integer,
        ms::AbstractVector{<:Integer},
        ŒΩs·¥¥,
        sb::Union{SymBasis, BandRepSet},
        Œìidxs;
        ntidxs=eachindex(sb),
        maxdepth::Integer=div(ŒΩ·µó, minimum(ŒΩs·¥¥), RoundDown)
    )

    ŒΩ·µó > 0 || throw(DomainError(ŒΩ·µó, "must be positive"))

    c‚Å±s = Vector{Int}[] # solution vector storage
    ms‚Ä≤ = similar(ms)   # buffer
    _filling_symmetry_constrained_expansions!(c‚Å±s, ms‚Ä≤, (), ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs, 
                                              1, length(ntidxs), 1, maxdepth, ntidxs)
end
function _filling_symmetry_constrained_expansions!(c‚Å±s, ms‚Ä≤, ijks, ŒΩ·µó, ms, ŒΩs·¥¥, 
                sb::Union{SymBasis, BandRepSet}, Œìidxs, startidx, stopidx, depth, maxdepth, ntidxs)
    depth > maxdepth && return c‚Å±s
    for idx·µ¢ in startidx:stopidx
        i = ntidxs[idx·µ¢]
        ŒΩ = test_expansion_add_if_valid!(c‚Å±s, ms‚Ä≤, (ijks...,i), ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs)
        ŒΩ ‚â• ŒΩ·µó && continue # matched/overflowed ŒΩ·µó constraint; nothing more to add

        # did not yet match/overflow filling constraint: add more Hilbert basis vectors
        _filling_symmetry_constrained_expansions!(c‚Å±s, ms‚Ä≤, (ijks...,i), ŒΩ·µó, ms, 
                ŒΩs·¥¥, sb, Œìidxs, idx·µ¢, stopidx, depth+1, maxdepth, ntidxs)
    end
    return c‚Å±s
end

function test_expansion_add_if_valid!(c‚Å±s, ms‚Ä≤, # push to c‚Å±s; use ms‚Ä≤ as an updating buffer
                                      ijks::NTuple{N,Int}, ŒΩ·µó, ms, ŒΩs·¥¥, sb, Œìidxs) where N

    ŒΩ = _sum_fillings(ijks, ŒΩs·¥¥)                   # accumulate band fillings
    ŒΩ ‚â† ŒΩ·µó && return ŒΩ                             # return early if ŒΩ overflows ŒΩ·µó
    _update_symmetry_constraints!(ms‚Ä≤, ijks, ms, sb, Œìidxs) # update Œì-constraints in ms‚Ä≤

    # check if n·¥¥·µ¢+n·¥¥‚±º+n·¥¥‚Çñ+... fulfil symmetry constraints from `ms`
    if all(‚â§(0), ms‚Ä≤) # check if n·¥¥·µ¢+n·¥¥‚±º+n·¥¥‚Çñ+... fulfill `ms` constraints
        add_solution!(c‚Å±s, ijks) # push a solution "i+j+k+..." to storage `c‚Å±s`
    end

    return ŒΩ # return filling associated with `ijks` expansion
end

# equivalent of ŒΩ = ŒΩs·¥¥[i] + ŒΩs·¥¥[j] + ŒΩs·¥¥[k] + ... for i,j,k, in ijks, recursively
_sum_fillings(ijks::NTuple{1,Int}, ŒΩs·¥¥) = ŒΩs·¥¥[first(ijks)]
function _sum_fillings(ijks::NTuple{N,Int}, ŒΩs·¥¥) where N
    ŒΩs·¥¥[first(ijks)] + _sum_fillings(Base.tail(ijks), ŒΩs·¥¥)
end

# update Œì-constraints, assigning to ms‚Ä≤
@inline function _update_symmetry_constraints!(
        ms‚Ä≤, ijks::NTuple{N,Int}, ms, sb::Union{SymBasis, BandRepSet}, Œìidxs
    ) where N

    if N == 1
        i, = ijks
        @views ms‚Ä≤ .= ms .- sb[i][Œìidxs]
    elseif N == 2
        i,j = ijks
        @views ms‚Ä≤ .= ms .- sb[i][Œìidxs] .- sb[j][Œìidxs]
    elseif N == 3
        i,j,k = ijks
        @views ms‚Ä≤ .= ms .- sb[i][Œìidxs] .- sb[j][Œìidxs] .- sb[k][Œìidxs]
    elseif N == 4
        i,j,k,l = ijks
        @views ms‚Ä≤ .= ms .- sb[i][Œìidxs] .- sb[j][Œìidxs] .- sb[k][Œìidxs] .- sb[l][Œìidxs]
    else # fall back to looping
        ms‚Ä≤ .= ms
        for ijk in ijks 
            @views ms‚Ä≤ .-= sb[ijk][Œìidxs]
        end
    end
    return ms‚Ä≤
end

function safetycheck¬≤·µÄ(c‚Å±s, ŒΩ¬≤·µÄ·µó, ms¬≤·µÄ, ŒΩs·¥¥, sb, Œìidxs)
    # check that all solutions are valid and unique
    all(c‚Å±->isvalid_solution(c‚Å±, ŒΩ¬≤·µÄ·µó, ms¬≤·µÄ, sb, Œìidxs), c‚Å±s) || throw("Found invalid solutions")
    allunique(c‚Å±s) || throw("Found repeated solutions, unexpectedly")

    # Check that it didn't matter whether we excluded "trivial" basis elements or not
    c‚Å±s‚Ä≤ = filling_symmetry_constrained_expansions(ŒΩ¬≤·µÄ·µó, ms¬≤·µÄ, ŒΩs·¥¥, sb, Œìidxs)
    Set(c‚Å±s) ‚â† Set(c‚Å±s‚Ä≤) && throw("Did not obtain equivalent solution sets")
end

function isvalid_solution(c‚Å±::AbstractVector{<:Integer}, ŒΩ·µó::Integer, 
            ms::AbstractVector{<:Integer}, sb::SymBasis, Œìidxs::AbstractVector{<:Integer})
    n = sum_symbases(sb, c‚Å±)
    return all(n[Œìidxs] .‚â• ms) && n[end] == ŒΩ·µó
end

"""
    filling_constrained_expansions(ŒΩs·¥¥::AbstractVector{<:Integer}, ŒΩ·µó::Integer)

Find all non-negative integer solutions ``{c·µ¢}`` to the linear Diophantine equation

``c‚ÇÅŒΩ‚ÇÅ·¥¥ + c‚ÇÇv‚ÇÇ·¥¥ + ... =`` `ŒΩ·µó`

with `ŒΩs·¥¥` ``= [ŒΩ‚ÇÅ·¥¥, ŒΩ‚ÇÇ·¥¥, ...]`` denoting the fillings associated with a Hilbert basis.

Solutions are returned as a `::Vector{Vector{Int}}`. Uses PyNormaliz to solve the integral
polytope defined by the above inhomogeneous equation.

Optionally prints number of solutions, if the kwarg `verbose::Bool=false` is set to `true`.
"""
function filling_constrained_expansions(ŒΩs·¥¥::AbstractVector{<:Integer}, ŒΩ·µó::Integer; 
                                        verbose::Bool=false)

    ŒΩ·µó > 0 || throw(DomainError(ŒΩ·µó, "must be positive"))
    
    # We want to avoid including terms where ŒΩ·µ¢·¥¥ > v·µó since they cannot feature in a valid
    # solution anyway and actually end up slowing down the calculation significantly
    nt_idxs = findall(‚â§(ŒΩ·µó), ŒΩs·¥¥)
    # Specify linear Diophantine equation via PyNormaliz's Cone constructor
    inhom_eqs = [vcat((@view ŒΩs·¥¥[nt_idxs]), -ŒΩ·µó)]
    #inhom_eqs = reshape([ŒΩs·¥¥; -ŒΩ·µó], 1, length(ŒΩs·¥¥)+1)
    P = PyNormaliz.Cone(
            inhom_equations = inhom_eqs, grading = [ones(Int, length(nt_idxs))])
    # Find non-negative integer solutions to the above integral polytope
    normaliz_sols_py = P.LatticePoints() # distinct solutions across rows, Python list of lists
    normaliz_sols = pyconvert(Vector{Vector{Int}}, normaliz_sols_py)

    # last column of `normaliz_sols` is a multiplier on ``-ŒΩ·µó``: should be 1, otherwise it 
    # corresponds to finding a solution that has a filling equal to a multiple of ŒΩ·µó. We 
    # filter out these solutions below.
    c‚Å±s = [nt_idxs[coef2idxs(c‚Ä≤[1:end-1])] for c‚Ä≤ in normaliz_sols if isone(c‚Ä≤[end])]
    
    if verbose 
        println("   ŒΩ·µó = ", ŒΩ·µó, ": ", length(c‚Å±s), " ŒΩ·µó-constrained candidate solutions = ")
        if length(c‚Å±s) ‚â† size(normaliz_sols, 1) 
            println("      DISCARDED \"MULTIPLES\"-SOLUTIONS W/ MULTIPLICITY = ",
                    filter(‚â†(1), unique(normaliz_sols[:,end])))
        end
    end

    return c‚Å±s
end